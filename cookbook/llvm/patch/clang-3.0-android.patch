--- lib/CodeGen/TargetInfo.cpp
+++ lib/CodeGen/TargetInfo.cpp
@@ -2328,7 +2328,7 @@
 
   bool isEABI() const {
     StringRef Env = getContext().getTargetInfo().getTriple().getEnvironmentName();
-    return (Env == "gnueabi" || Env == "eabi");
+    return (Env == "androideabi" || Env == "gnueabi" || Env == "eabi");
   }
 
 private:
--- lib/Driver/Driver.cpp
+++ lib/Driver/Driver.cpp
@@ -1530,7 +1530,7 @@
   if (!TmpDir)
     TmpDir = ::getenv("TMP");
   if (!TmpDir)
-    TmpDir = "/tmp";
+    TmpDir = "/cache";
   llvm::sys::Path P(TmpDir);
   P.appendComponent(Prefix);
   if (P.makeUnique(false, &Error)) {
--- lib/Driver/ToolChains.cpp
+++ lib/Driver/ToolChains.cpp
@@ -1641,7 +1641,10 @@
     SmallVectorImpl<StringRef> &Triples) {
   if (HostArch == llvm::Triple::arm || HostArch == llvm::Triple::thumb) {
     static const char *const ARMLibDirs[] = { "/lib" };
-    static const char *const ARMTriples[] = { "arm-linux-gnueabi" };
+    static const char *const ARMTriples[] = {
+      "arm-linux-gnueabi",
+      "arm-linux-androideabi"
+    };
     LibDirs.append(ARMLibDirs, ARMLibDirs + llvm::array_lengthof(ARMLibDirs));
     Triples.append(ARMTriples, ARMTriples + llvm::array_lengthof(ARMTriples));
   } else if (HostArch == llvm::Triple::x86_64) {
@@ -1975,7 +1978,8 @@
     "/usr/include/i486-linux-gnu"
   };
   const StringRef ARMMultiarchIncludeDirs[] = {
-    "/usr/include/arm-linux-gnueabi"
+    "/usr/include/arm-linux-gnueabi",
+    "/usr/include/arm-linux-androideabi"
   };
   ArrayRef<StringRef> MultiarchIncludeDirs;
   if (getTriple().getArch() == llvm::Triple::x86_64) {
--- lib/Driver/Tools.cpp
+++ lib/Driver/Tools.cpp
@@ -525,6 +525,9 @@
   } else {
     // Select the default based on the platform.
     switch(Triple.getEnvironment()) {
+    case llvm::Triple::ANDROIDEABI:
+      ABIName = "aapcs";
+      break;
     case llvm::Triple::GNUEABI:
       ABIName = "aapcs-linux";
       break;
@@ -582,15 +585,34 @@
     }
 
     case llvm::Triple::Linux: {
-      if (getToolChain().getTriple().getEnvironment() == llvm::Triple::GNUEABI) {
-        FloatABI = "softfp";
-        break;
+      switch(getToolChain().getTriple().getEnvironment()) {
+        case llvm::Triple::ANDROIDEABI: {
+          StringRef ArchName =
+            getLLVMArchSuffixForARM(getARMTargetCPU(Args, Triple));
+          if (ArchName.startswith("v6") || ArchName.startswith("v7"))
+            FloatABI = "softfp";
+          else
+            FloatABI = "soft";
+          break;
+        }
+        case llvm::Triple::GNUEABI:
+          FloatABI = "softfp";
+          break;
       }
     }
     // fall through
 
     default:
       switch(Triple.getEnvironment()) {
+      case llvm::Triple::ANDROIDEABI: {
+        StringRef ArchName =
+          getLLVMArchSuffixForARM(getARMTargetCPU(Args, Triple));
+        if (ArchName.startswith("v6") || ArchName.startswith("v7"))
+          FloatABI = "softfp";
+        else
+          FloatABI = "soft";
+        break;
+      }
       case llvm::Triple::GNUEABI:
         FloatABI = "softfp";
         break;
@@ -4311,7 +4333,7 @@
       CmdArgs.push_back("/lib/ld-linux.so.2");
     else if (ToolChain.getArch() == llvm::Triple::arm ||
              ToolChain.getArch() == llvm::Triple::thumb)
-      CmdArgs.push_back("/lib/ld-linux.so.3");
+      CmdArgs.push_back("/system/bin/linker");
     else if (ToolChain.getArch() == llvm::Triple::ppc)
       CmdArgs.push_back("/lib/ld.so.1");
     else if (ToolChain.getArch() == llvm::Triple::ppc64)
--- lib/Frontend/ASTUnit.cpp
+++ lib/Frontend/ASTUnit.cpp
@@ -1028,7 +1028,7 @@
     TmpDir = ::getenv("USERPROFILE");
 #endif
   if (!TmpDir)
-    TmpDir = "/tmp";
+    TmpDir = "/cache";
   llvm::sys::Path P(TmpDir);
   P.createDirectoryOnDisk(true);
   P.appendComponent("preamble");
--- lib/Frontend/CompilerInstance.cpp
+++ lib/Frontend/CompilerInstance.cpp
@@ -772,7 +772,11 @@
   MyHostname[0] = 0;
   gethostname(MyHostname, 255);
   // Check whether the process is dead. If so, we're done.
+#ifdef ANDROID
+  if (MyHostname == Hostname && getpgid(PID) == -1 && errno == ESRCH)
+#else
   if (MyHostname == Hostname && getsid(PID) == -1 && errno == ESRCH)
+#endif
     return false;
 #endif
 
--- lib/Frontend/InitHeaderSearch.cpp
+++ lib/Frontend/InitHeaderSearch.cpp
@@ -215,7 +215,11 @@
       break;
     default:
       // FIXME: temporary hack: hard-coded paths.
-      AddPath("/usr/local/include", System, true, false, false);
+      /*AddPath("/usr/local/include", System, true, false, false);*/
+      AddPath("/system/include", System, true, false, false);
+      AddPath("/system/include/c++", System, true, false, false);
+      AddPath("/system/lib/gcc/arm-linux-androideabi/4.6.2/include", System, true, false, false);
+      AddPath("/system/lib/gcc/arm-linux-androideabi/4.6.2/include-fixed", System, true, false, false);
       break;
     }
   }
--- tools/libclang/CIndexer.cpp
+++ tools/libclang/CIndexer.cpp
@@ -100,7 +100,7 @@
   if (!TmpDir)
     TmpDir = ::getenv("TMP");
   if (!TmpDir)
-    TmpDir = "/tmp";
+    TmpDir = "/cache";
   llvm::sys::Path P(TmpDir);
   P.appendComponent("remap");
   if (P.makeUnique(false, &Error))
--- utils/CmpDriver
+++ utils/CmpDriver
@@ -74,8 +74,8 @@
     def isTempFile(self, filename):
         if filename[0] != '"' or filename[-1] != '"':
             return False
-        return (filename.startswith('/tmp/', 1) or
-                filename.startswith('/var/', 1))
+        return (filename.startswith('/cache/', 1) or
+                filename.startswith('/data/', 1))
 
     def dist(self, a, b):
         if a and b and self.isTempFile(a) and self.isTempFile(b):
